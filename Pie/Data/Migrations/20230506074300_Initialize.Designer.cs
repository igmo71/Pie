// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Pie.Data;

#nullable disable

namespace Pie.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20230506074300_Initialize")]
    partial class Initialize
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0-preview.3.23174.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .HasColumnType("text");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Pie.Data.Models.Application.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("FirstName")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("LastName")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Pie.Data.Models.BaseDoc", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.ToTable("BaseDocs");
                });

            modelBuilder.Entity("Pie.Data.Models.ChangeReason", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("Active")
                        .HasColumnType("boolean");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(21)
                        .HasColumnType("character varying(21)");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("ChangeReasons");

                    b.HasDiscriminator<string>("Discriminator").HasValue("ChangeReason");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Pie.Data.Models.DocIn", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("Active")
                        .HasColumnType("boolean");

                    b.Property<string>("Comment")
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Number")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<int?>("QueueKey")
                        .HasColumnType("integer");

                    b.Property<int?>("StatusKey")
                        .HasColumnType("integer");

                    b.Property<Guid?>("WarehouseId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("QueueKey");

                    b.HasIndex("StatusKey");

                    b.HasIndex("WarehouseId");

                    b.ToTable("DocsIn");
                });

            modelBuilder.Entity("Pie.Data.Models.DocInBaseDoc", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("BaseDocId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("DocInId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("BaseDocId");

                    b.HasIndex("DocInId");

                    b.ToTable("DocInBaseDocs");
                });

            modelBuilder.Entity("Pie.Data.Models.DocInProduct", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ChangeReasonId")
                        .HasColumnType("uuid");

                    b.Property<float>("Count")
                        .HasColumnType("real");

                    b.Property<Guid>("DocInId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ChangeReasonId");

                    b.HasIndex("DocInId");

                    b.HasIndex("ProductId");

                    b.ToTable("DocInProducts");
                });

            modelBuilder.Entity("Pie.Data.Models.DocOut", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("Active")
                        .HasColumnType("boolean");

                    b.Property<string>("Comment")
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Number")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<int?>("QueueKey")
                        .HasColumnType("integer");

                    b.Property<string>("QueueNumber")
                        .HasMaxLength(5)
                        .HasColumnType("character varying(5)");

                    b.Property<DateTime>("ShipDateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int?>("StatusKey")
                        .HasColumnType("integer");

                    b.Property<Guid?>("WarehouseId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("QueueKey");

                    b.HasIndex("StatusKey");

                    b.HasIndex("WarehouseId");

                    b.ToTable("DocsOut");
                });

            modelBuilder.Entity("Pie.Data.Models.DocOutBaseDoc", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("BaseDocId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("DocOutId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("BaseDocId");

                    b.HasIndex("DocOutId");

                    b.ToTable("DocOutBaseDocs");
                });

            modelBuilder.Entity("Pie.Data.Models.DocOutProduct", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ChangeReasonId")
                        .HasColumnType("uuid");

                    b.Property<float>("Count")
                        .HasColumnType("real");

                    b.Property<Guid>("DocOutId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ChangeReasonId");

                    b.HasIndex("DocOutId");

                    b.HasIndex("ProductId");

                    b.ToTable("DocOutProducts");
                });

            modelBuilder.Entity("Pie.Data.Models.Product", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("Active")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("Pie.Data.Models.QueueIn", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("Active")
                        .HasColumnType("boolean");

                    b.Property<int?>("Key")
                        .IsRequired()
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.ToTable("QueuesIn");
                });

            modelBuilder.Entity("Pie.Data.Models.QueueOut", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("Active")
                        .HasColumnType("boolean");

                    b.Property<int?>("Key")
                        .IsRequired()
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.ToTable("QueuesOut");

                    b.HasData(
                        new
                        {
                            Id = new Guid("7e83260a-316f-4a1f-be9a-bf353b118536"),
                            Active = true,
                            Key = 10,
                            Name = "Живая очередь"
                        },
                        new
                        {
                            Id = new Guid("3558d2ba-ffb6-4f08-9891-f7f1e8853c83"),
                            Active = true,
                            Key = 20,
                            Name = "Собрать к дате"
                        },
                        new
                        {
                            Id = new Guid("d964fcad-d71d-480a-bdeb-0b2c045fcd90"),
                            Active = true,
                            Key = 30,
                            Name = "Собственная доставка"
                        },
                        new
                        {
                            Id = new Guid("8bdc656e-8a2c-4aef-9422-e0a419608190"),
                            Active = true,
                            Key = 40,
                            Name = "Очередность не указана"
                        });
                });

            modelBuilder.Entity("Pie.Data.Models.StatusIn", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("Active")
                        .HasColumnType("boolean");

                    b.Property<int?>("Key")
                        .IsRequired()
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.ToTable("StatusesIn");
                });

            modelBuilder.Entity("Pie.Data.Models.StatusOut", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("Active")
                        .HasColumnType("boolean");

                    b.Property<int?>("Key")
                        .IsRequired()
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.ToTable("StatusesOut");

                    b.HasData(
                        new
                        {
                            Id = new Guid("c2c5935d-b332-4d84-b1fd-309ad8a65356"),
                            Active = true,
                            Key = 0,
                            Name = "Подготовлено"
                        },
                        new
                        {
                            Id = new Guid("e1a4c395-f7a3-40af-82ab-ad545e51eca7"),
                            Active = true,
                            Key = 1,
                            Name = "КОтбору"
                        },
                        new
                        {
                            Id = new Guid("bd1ae241-d787-4a6d-b920-029bc6577364"),
                            Active = false,
                            Key = 2,
                            Name = "КПроверке"
                        },
                        new
                        {
                            Id = new Guid("17cee206-e06f-47d8-824d-14eeceaf394a"),
                            Active = false,
                            Key = 3,
                            Name = "ВПроцессеПроверки"
                        },
                        new
                        {
                            Id = new Guid("e911589b-613c-42ad-ad56-7083c481c4b4"),
                            Active = false,
                            Key = 4,
                            Name = "Проверен"
                        },
                        new
                        {
                            Id = new Guid("7c2bd6be-cf81-4b1a-9acf-d4ebf416f4d3"),
                            Active = true,
                            Key = 5,
                            Name = "КОтгрузке"
                        },
                        new
                        {
                            Id = new Guid("9eba20ce-9245-4109-92cb-a9875801fbb4"),
                            Active = true,
                            Key = 6,
                            Name = "Отгружен"
                        });
                });

            modelBuilder.Entity("Pie.Data.Models.Warehouse", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("Active")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.ToTable("Warehouses");
                });

            modelBuilder.Entity("Pie.Data.Models.ChangeReasonIn", b =>
                {
                    b.HasBaseType("Pie.Data.Models.ChangeReason");

                    b.HasDiscriminator().HasValue("ChangeReasonIn");
                });

            modelBuilder.Entity("Pie.Data.Models.ChangeReasonOut", b =>
                {
                    b.HasBaseType("Pie.Data.Models.ChangeReason");

                    b.HasDiscriminator().HasValue("ChangeReasonOut");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Pie.Data.Models.Application.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Pie.Data.Models.Application.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Pie.Data.Models.Application.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Pie.Data.Models.Application.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Pie.Data.Models.DocIn", b =>
                {
                    b.HasOne("Pie.Data.Models.QueueIn", "Queue")
                        .WithMany()
                        .HasForeignKey("QueueKey")
                        .HasPrincipalKey("Key")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Pie.Data.Models.StatusIn", "Status")
                        .WithMany()
                        .HasForeignKey("StatusKey")
                        .HasPrincipalKey("Key")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Pie.Data.Models.Warehouse", "Warehouse")
                        .WithMany()
                        .HasForeignKey("WarehouseId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Queue");

                    b.Navigation("Status");

                    b.Navigation("Warehouse");
                });

            modelBuilder.Entity("Pie.Data.Models.DocInBaseDoc", b =>
                {
                    b.HasOne("Pie.Data.Models.BaseDoc", "BaseDoc")
                        .WithMany()
                        .HasForeignKey("BaseDocId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Pie.Data.Models.DocIn", "DocIn")
                        .WithMany("BaseDocs")
                        .HasForeignKey("DocInId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BaseDoc");

                    b.Navigation("DocIn");
                });

            modelBuilder.Entity("Pie.Data.Models.DocInProduct", b =>
                {
                    b.HasOne("Pie.Data.Models.ChangeReasonIn", "ChangeReason")
                        .WithMany()
                        .HasForeignKey("ChangeReasonId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Pie.Data.Models.DocIn", "DocIn")
                        .WithMany("Products")
                        .HasForeignKey("DocInId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Pie.Data.Models.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ChangeReason");

                    b.Navigation("DocIn");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Pie.Data.Models.DocOut", b =>
                {
                    b.HasOne("Pie.Data.Models.QueueOut", "Queue")
                        .WithMany()
                        .HasForeignKey("QueueKey")
                        .HasPrincipalKey("Key")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Pie.Data.Models.StatusOut", "Status")
                        .WithMany()
                        .HasForeignKey("StatusKey")
                        .HasPrincipalKey("Key")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Pie.Data.Models.Warehouse", "Warehouse")
                        .WithMany()
                        .HasForeignKey("WarehouseId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Queue");

                    b.Navigation("Status");

                    b.Navigation("Warehouse");
                });

            modelBuilder.Entity("Pie.Data.Models.DocOutBaseDoc", b =>
                {
                    b.HasOne("Pie.Data.Models.BaseDoc", "BaseDoc")
                        .WithMany()
                        .HasForeignKey("BaseDocId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Pie.Data.Models.DocOut", "DocOut")
                        .WithMany("BaseDocs")
                        .HasForeignKey("DocOutId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BaseDoc");

                    b.Navigation("DocOut");
                });

            modelBuilder.Entity("Pie.Data.Models.DocOutProduct", b =>
                {
                    b.HasOne("Pie.Data.Models.ChangeReasonOut", "ChangeReason")
                        .WithMany()
                        .HasForeignKey("ChangeReasonId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Pie.Data.Models.DocOut", "DocOut")
                        .WithMany("Products")
                        .HasForeignKey("DocOutId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Pie.Data.Models.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ChangeReason");

                    b.Navigation("DocOut");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Pie.Data.Models.DocIn", b =>
                {
                    b.Navigation("BaseDocs");

                    b.Navigation("Products");
                });

            modelBuilder.Entity("Pie.Data.Models.DocOut", b =>
                {
                    b.Navigation("BaseDocs");

                    b.Navigation("Products");
                });
#pragma warning restore 612, 618
        }
    }
}
