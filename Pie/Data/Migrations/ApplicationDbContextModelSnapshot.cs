// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Pie.Data;

#nullable disable

namespace Pie.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0-preview.7.23375.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "d6bfb7c2-9a45-45e5-b27a-3b7cba85527f",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "9423e7b8-b496-41e8-b9c9-416b74823db9",
                            Name = "Manager",
                            NormalizedName = "MANAGER"
                        },
                        new
                        {
                            Id = "049c2135-b769-4ea5-986a-a5231330fe46",
                            Name = "Service1c",
                            NormalizedName = "SERVICE1C"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .HasColumnType("text");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "22919707-7d2c-450d-92e7-19f36935bcdb",
                            RoleId = "9423e7b8-b496-41e8-b9c9-416b74823db9"
                        },
                        new
                        {
                            UserId = "22919707-7d2c-450d-92e7-19f36935bcdb",
                            RoleId = "d6bfb7c2-9a45-45e5-b27a-3b7cba85527f"
                        },
                        new
                        {
                            UserId = "22919707-7d2c-450d-92e7-19f36935bcdb",
                            RoleId = "049c2135-b769-4ea5-986a-a5231330fe46"
                        },
                        new
                        {
                            UserId = "de3f6ced-85ca-4feb-8d98-395dc8ee71cb",
                            RoleId = "9423e7b8-b496-41e8-b9c9-416b74823db9"
                        },
                        new
                        {
                            UserId = "de3f6ced-85ca-4feb-8d98-395dc8ee71cb",
                            RoleId = "d6bfb7c2-9a45-45e5-b27a-3b7cba85527f"
                        },
                        new
                        {
                            UserId = "de3f6ced-85ca-4feb-8d98-395dc8ee71cb",
                            RoleId = "049c2135-b769-4ea5-986a-a5231330fe46"
                        },
                        new
                        {
                            UserId = "d90e31c9-e19f-4ee7-9580-d856daba6d02",
                            RoleId = "049c2135-b769-4ea5-986a-a5231330fe46"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Pie.Connectors.Connector1c.Client1cConfig", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("BaseAddress")
                        .HasColumnType("text");

                    b.Property<string>("HttpService")
                        .HasColumnType("text");

                    b.Property<string>("OData")
                        .HasColumnType("text");

                    b.Property<string>("Password")
                        .HasColumnType("text");

                    b.Property<string>("UserName")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Client1CConfig");
                });

            modelBuilder.Entity("Pie.Data.Models.BaseDoc", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.ToTable("BaseDocs");
                });

            modelBuilder.Entity("Pie.Data.Models.ChangeReason", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("Active")
                        .HasColumnType("boolean");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(21)
                        .HasColumnType("character varying(21)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.ToTable("ChangeReasons");

                    b.HasDiscriminator<string>("Discriminator").HasValue("ChangeReason");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Pie.Data.Models.DeliveryArea", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("Active")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsFolder")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<Guid?>("ParentId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.ToTable("DeliveryAreas");
                });

            modelBuilder.Entity("Pie.Data.Models.Identity.AppUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("FirstName")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("LastName")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<Guid?>("WarehouseId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.HasIndex("WarehouseId");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "22919707-7d2c-450d-92e7-19f36935bcdb",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "18c24c93-8d87-4450-9500-32f059f6398a",
                            Email = "igmo@dobroga.ru",
                            EmailConfirmed = true,
                            FirstName = "Игорь",
                            LastName = "Могильницкий",
                            LockoutEnabled = true,
                            NormalizedEmail = "IGMO@DOBROGA.RU",
                            NormalizedUserName = "IGMO@DOBROGA.RU",
                            PasswordHash = "AQAAAAIAAYagAAAAEDgydLmvi4/0kDXZB6+ShJFMNIK8Xzgaawytbvp8IMJquSZ/4hO8sPu9mlXC5uS9IQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "HCJOWYFSM63CJOZM5AZAGXSHEI257BCI",
                            TwoFactorEnabled = false,
                            UserName = "igmo@dobroga.ru"
                        },
                        new
                        {
                            Id = "de3f6ced-85ca-4feb-8d98-395dc8ee71cb",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "3bd6e424-97b8-4f30-9f50-44e9368ae7c5",
                            Email = "admin@www",
                            EmailConfirmed = true,
                            FirstName = "Админ",
                            LockoutEnabled = true,
                            NormalizedEmail = "ADMIN@WWW",
                            NormalizedUserName = "ADMIN@WWW",
                            PasswordHash = "AQAAAAIAAYagAAAAELfYeQJOlhGQE7zLxj69o4waFM3ISF424TUMU9/DMkWPr03XyfD7EJO3XUlOkKOd0A==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "I5VGBC5NXRMCMKKBSXQIJNJC6UFZUTMF",
                            TwoFactorEnabled = false,
                            UserName = "admin@www"
                        },
                        new
                        {
                            Id = "d90e31c9-e19f-4ee7-9580-d856daba6d02",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "c9023eae-8542-460f-af6c-fb2361ae2be0",
                            Email = "Service1c@www",
                            EmailConfirmed = true,
                            FirstName = "Service1c",
                            LockoutEnabled = true,
                            NormalizedEmail = "SERVICE1C@WWW",
                            NormalizedUserName = "SERVICE1C@WWW",
                            PasswordHash = "AQAAAAIAAYagAAAAEAP/xtaltm7cuB/Bk/sRF/GDtCtQf9B1ghEEbr6eprNlsKYsaGt5ncmcR/utO76tWw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "6WMMOSBLWGF45HZLH5OJIQADMFB6YJGQ",
                            TwoFactorEnabled = false,
                            UserName = "Service1c@www"
                        });
                });

            modelBuilder.Entity("Pie.Data.Models.In.DocIn", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("Active")
                        .HasColumnType("boolean");

                    b.Property<string>("Comment")
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsTransfer")
                        .HasColumnType("boolean");

                    b.Property<Guid?>("ManagerId")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Number")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<Guid?>("PartnerId")
                        .HasColumnType("uuid");

                    b.Property<int?>("QueueKey")
                        .HasColumnType("integer");

                    b.Property<int?>("StatusKey")
                        .HasColumnType("integer");

                    b.Property<Guid?>("WarehouseId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ManagerId");

                    b.HasIndex("PartnerId");

                    b.HasIndex("QueueKey");

                    b.HasIndex("StatusKey");

                    b.HasIndex("WarehouseId");

                    b.ToTable("DocsIn");
                });

            modelBuilder.Entity("Pie.Data.Models.In.DocInBaseDoc", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("BaseDocId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("DocId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("BaseDocId");

                    b.HasIndex("DocId");

                    b.ToTable("DocInBaseDocs");
                });

            modelBuilder.Entity("Pie.Data.Models.In.DocInHistory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("DocId")
                        .HasColumnType("uuid");

                    b.Property<string>("DocName")
                        .HasColumnType("text");

                    b.Property<int?>("StatusKey")
                        .HasColumnType("integer");

                    b.Property<string>("UserId")
                        .HasMaxLength(36)
                        .HasColumnType("character varying(36)");

                    b.HasKey("Id");

                    b.HasIndex("StatusKey");

                    b.HasIndex("UserId");

                    b.ToTable("DocsInHistory");
                });

            modelBuilder.Entity("Pie.Data.Models.In.DocInProduct", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<float>("CountFact")
                        .HasColumnType("real");

                    b.Property<float>("CountPlan")
                        .HasColumnType("real");

                    b.Property<Guid>("DocId")
                        .HasColumnType("uuid");

                    b.Property<int>("LineNumber")
                        .HasColumnType("integer");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uuid");

                    b.Property<string>("Unit")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<float>("Weight")
                        .HasColumnType("real");

                    b.HasKey("Id");

                    b.HasIndex("DocId");

                    b.HasIndex("ProductId");

                    b.ToTable("DocInProducts");
                });

            modelBuilder.Entity("Pie.Data.Models.In.DocInProductHistory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ChangeReasonId")
                        .HasColumnType("uuid");

                    b.Property<float>("CountFact")
                        .HasColumnType("real");

                    b.Property<float>("CountPlan")
                        .HasColumnType("real");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("DocId")
                        .HasColumnType("uuid");

                    b.Property<string>("DocName")
                        .HasColumnType("text");

                    b.Property<int>("LineNumber")
                        .HasColumnType("integer");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uuid");

                    b.Property<string>("UserId")
                        .HasMaxLength(36)
                        .HasColumnType("character varying(36)");

                    b.HasKey("Id");

                    b.HasIndex("ChangeReasonId");

                    b.HasIndex("ProductId");

                    b.HasIndex("UserId");

                    b.ToTable("DocInProductsHistory");
                });

            modelBuilder.Entity("Pie.Data.Models.In.QueueIn", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("Active")
                        .HasColumnType("boolean");

                    b.Property<int?>("Key")
                        .IsRequired()
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.ToTable("QueuesIn");

                    b.HasData(
                        new
                        {
                            Id = new Guid("a3136307-3871-43c8-8eae-1ac5bb948237"),
                            Active = true,
                            Key = 10,
                            Name = "Под клиента"
                        },
                        new
                        {
                            Id = new Guid("5b7c2f6b-630c-4e69-9da9-097e46b0e2d1"),
                            Active = true,
                            Key = 20,
                            Name = "Срочно в продажу"
                        },
                        new
                        {
                            Id = new Guid("ddf72e17-8ced-44dd-aff9-3d82e17ec525"),
                            Active = true,
                            Key = 30,
                            Name = "Просрочено"
                        },
                        new
                        {
                            Id = new Guid("0c99088a-59ca-458b-be5f-be36c3a21643"),
                            Active = true,
                            Key = 40,
                            Name = "Очередность не указана"
                        });
                });

            modelBuilder.Entity("Pie.Data.Models.In.StatusIn", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("Active")
                        .HasColumnType("boolean");

                    b.Property<bool>("CanChange")
                        .HasColumnType("boolean");

                    b.Property<int?>("Key")
                        .IsRequired()
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.ToTable("StatusesIn");

                    b.HasData(
                        new
                        {
                            Id = new Guid("b2cbc819-151b-489d-9b09-649aa16b2a8b"),
                            Active = true,
                            CanChange = false,
                            Key = 0,
                            Name = "КПоступлению"
                        },
                        new
                        {
                            Id = new Guid("ba575f5d-1c8d-4616-a707-1b4157746aa3"),
                            Active = true,
                            CanChange = false,
                            Key = 1,
                            Name = "ВРаботе"
                        },
                        new
                        {
                            Id = new Guid("f1cff011-6ecb-49f1-9898-2bf4a69b7b13"),
                            Active = false,
                            CanChange = false,
                            Key = 2,
                            Name = "ТребуетсяОбработка"
                        },
                        new
                        {
                            Id = new Guid("7f8bf9f1-92e3-4f45-84ea-461b9f82aa20"),
                            Active = false,
                            CanChange = false,
                            Key = 3,
                            Name = "Принят"
                        });
                });

            modelBuilder.Entity("Pie.Data.Models.Manager", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.ToTable("Managers");
                });

            modelBuilder.Entity("Pie.Data.Models.Out.DocOut", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("Active")
                        .HasColumnType("boolean");

                    b.Property<string>("Comment")
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("DeliveryAddress")
                        .HasColumnType("text");

                    b.Property<Guid?>("DeliveryAreaId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsTransfer")
                        .HasColumnType("boolean");

                    b.Property<Guid?>("ManagerId")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Number")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<Guid?>("PartnerId")
                        .HasColumnType("uuid");

                    b.Property<int?>("QueueKey")
                        .HasColumnType("integer");

                    b.Property<string>("QueueNumber")
                        .HasMaxLength(5)
                        .HasColumnType("character varying(5)");

                    b.Property<DateTime>("ShipDateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int?>("StatusKey")
                        .HasColumnType("integer");

                    b.Property<Guid?>("WarehouseId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("DeliveryAreaId");

                    b.HasIndex("ManagerId");

                    b.HasIndex("PartnerId");

                    b.HasIndex("QueueKey");

                    b.HasIndex("StatusKey");

                    b.HasIndex("WarehouseId");

                    b.ToTable("DocsOut");
                });

            modelBuilder.Entity("Pie.Data.Models.Out.DocOutBaseDoc", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("BaseDocId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("DocId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("BaseDocId");

                    b.HasIndex("DocId");

                    b.ToTable("DocOutBaseDocs");
                });

            modelBuilder.Entity("Pie.Data.Models.Out.DocOutHistory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("DocId")
                        .HasColumnType("uuid");

                    b.Property<string>("DocName")
                        .HasColumnType("text");

                    b.Property<int?>("StatusKey")
                        .HasColumnType("integer");

                    b.Property<string>("UserId")
                        .HasMaxLength(36)
                        .HasColumnType("character varying(36)");

                    b.HasKey("Id");

                    b.HasIndex("StatusKey");

                    b.HasIndex("UserId");

                    b.ToTable("DocsOutHistory");
                });

            modelBuilder.Entity("Pie.Data.Models.Out.DocOutProduct", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<float>("CountFact")
                        .HasColumnType("real");

                    b.Property<float>("CountPlan")
                        .HasColumnType("real");

                    b.Property<Guid>("DocId")
                        .HasColumnType("uuid");

                    b.Property<int>("LineNumber")
                        .HasColumnType("integer");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uuid");

                    b.Property<string>("Unit")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<float>("Weight")
                        .HasColumnType("real");

                    b.HasKey("Id");

                    b.HasIndex("DocId");

                    b.HasIndex("ProductId");

                    b.ToTable("DocOutProducts");
                });

            modelBuilder.Entity("Pie.Data.Models.Out.DocOutProductHistory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ChangeReasonId")
                        .HasColumnType("uuid");

                    b.Property<float>("CountFact")
                        .HasColumnType("real");

                    b.Property<float>("CountPlan")
                        .HasColumnType("real");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("DocId")
                        .HasColumnType("uuid");

                    b.Property<string>("DocName")
                        .HasColumnType("text");

                    b.Property<int>("LineNumber")
                        .HasColumnType("integer");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uuid");

                    b.Property<string>("UserId")
                        .HasMaxLength(36)
                        .HasColumnType("character varying(36)");

                    b.HasKey("Id");

                    b.HasIndex("ChangeReasonId");

                    b.HasIndex("ProductId");

                    b.HasIndex("UserId");

                    b.ToTable("DocOutProductsHistory");
                });

            modelBuilder.Entity("Pie.Data.Models.Out.QueueOut", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("Active")
                        .HasColumnType("boolean");

                    b.Property<TimeOnly>("ConcreteTime")
                        .HasColumnType("time without time zone");

                    b.Property<int>("Days")
                        .HasColumnType("integer");

                    b.Property<int>("Hours")
                        .HasColumnType("integer");

                    b.Property<int?>("Key")
                        .IsRequired()
                        .HasColumnType("integer");

                    b.Property<int>("Minutes")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.ToTable("QueuesOut");

                    b.HasData(
                        new
                        {
                            Id = new Guid("7e83260a-316f-4a1f-be9a-bf353b118536"),
                            Active = true,
                            ConcreteTime = new TimeOnly(0, 0, 0),
                            Days = 0,
                            Hours = 0,
                            Key = 10,
                            Minutes = 0,
                            Name = "Живая очередь"
                        },
                        new
                        {
                            Id = new Guid("3558d2ba-ffb6-4f08-9891-f7f1e8853c83"),
                            Active = true,
                            ConcreteTime = new TimeOnly(0, 0, 0),
                            Days = 0,
                            Hours = 0,
                            Key = 20,
                            Minutes = 0,
                            Name = "Собрать к дате"
                        },
                        new
                        {
                            Id = new Guid("d964fcad-d71d-480a-bdeb-0b2c045fcd90"),
                            Active = true,
                            ConcreteTime = new TimeOnly(0, 0, 0),
                            Days = 0,
                            Hours = 0,
                            Key = 30,
                            Minutes = 0,
                            Name = "Собственная доставка"
                        },
                        new
                        {
                            Id = new Guid("8bdc656e-8a2c-4aef-9422-e0a419608190"),
                            Active = true,
                            ConcreteTime = new TimeOnly(0, 0, 0),
                            Days = 0,
                            Hours = 0,
                            Key = 40,
                            Minutes = 0,
                            Name = "Очередность не указана"
                        });
                });

            modelBuilder.Entity("Pie.Data.Models.Out.StatusOut", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("Active")
                        .HasColumnType("boolean");

                    b.Property<bool>("CanChange")
                        .HasColumnType("boolean");

                    b.Property<int?>("Key")
                        .IsRequired()
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.ToTable("StatusesOut");

                    b.HasData(
                        new
                        {
                            Id = new Guid("c2c5935d-b332-4d84-b1fd-309ad8a65356"),
                            Active = true,
                            CanChange = false,
                            Key = 0,
                            Name = "Подготовлено"
                        },
                        new
                        {
                            Id = new Guid("e1a4c395-f7a3-40af-82ab-ad545e51eca7"),
                            Active = true,
                            CanChange = false,
                            Key = 1,
                            Name = "КОтбору"
                        },
                        new
                        {
                            Id = new Guid("bd1ae241-d787-4a6d-b920-029bc6577364"),
                            Active = false,
                            CanChange = false,
                            Key = 2,
                            Name = "КПроверке"
                        },
                        new
                        {
                            Id = new Guid("17cee206-e06f-47d8-824d-14eeceaf394a"),
                            Active = false,
                            CanChange = false,
                            Key = 3,
                            Name = "ВПроцессеПроверки"
                        },
                        new
                        {
                            Id = new Guid("e911589b-613c-42ad-ad56-7083c481c4b4"),
                            Active = false,
                            CanChange = false,
                            Key = 4,
                            Name = "Проверен"
                        },
                        new
                        {
                            Id = new Guid("7c2bd6be-cf81-4b1a-9acf-d4ebf416f4d3"),
                            Active = true,
                            CanChange = false,
                            Key = 5,
                            Name = "КОтгрузке"
                        },
                        new
                        {
                            Id = new Guid("9eba20ce-9245-4109-92cb-a9875801fbb4"),
                            Active = true,
                            CanChange = false,
                            Key = 6,
                            Name = "Отгружен"
                        });
                });

            modelBuilder.Entity("Pie.Data.Models.Partner", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.ToTable("Partners");
                });

            modelBuilder.Entity("Pie.Data.Models.Product", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("Active")
                        .HasColumnType("boolean");

                    b.Property<string>("Code")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("Pie.Data.Models.QueueNumber", b =>
                {
                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.Property<int>("CharValue")
                        .HasColumnType("integer");

                    b.Property<int>("NumValue")
                        .HasColumnType("integer");

                    b.HasKey("Value");

                    b.ToTable("QueueNumber");

                    b.HasData(
                        new
                        {
                            Value = "A000",
                            CharValue = 0,
                            NumValue = 0
                        });
                });

            modelBuilder.Entity("Pie.Data.Models.Warehouse", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("Active")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.ToTable("Warehouses");
                });

            modelBuilder.Entity("Pie.Data.Models.In.ChangeReasonIn", b =>
                {
                    b.HasBaseType("Pie.Data.Models.ChangeReason");

                    b.HasDiscriminator().HasValue("ChangeReasonIn");
                });

            modelBuilder.Entity("Pie.Data.Models.Out.ChangeReasonOut", b =>
                {
                    b.HasBaseType("Pie.Data.Models.ChangeReason");

                    b.HasDiscriminator().HasValue("ChangeReasonOut");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Pie.Data.Models.Identity.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Pie.Data.Models.Identity.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Pie.Data.Models.Identity.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Pie.Data.Models.Identity.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Pie.Data.Models.Identity.AppUser", b =>
                {
                    b.HasOne("Pie.Data.Models.Warehouse", "Warehouse")
                        .WithMany()
                        .HasForeignKey("WarehouseId");

                    b.Navigation("Warehouse");
                });

            modelBuilder.Entity("Pie.Data.Models.In.DocIn", b =>
                {
                    b.HasOne("Pie.Data.Models.Manager", "Manager")
                        .WithMany()
                        .HasForeignKey("ManagerId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Pie.Data.Models.Partner", "Partner")
                        .WithMany()
                        .HasForeignKey("PartnerId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Pie.Data.Models.In.QueueIn", "Queue")
                        .WithMany()
                        .HasForeignKey("QueueKey")
                        .HasPrincipalKey("Key")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Pie.Data.Models.In.StatusIn", "Status")
                        .WithMany()
                        .HasForeignKey("StatusKey")
                        .HasPrincipalKey("Key")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Pie.Data.Models.Warehouse", "Warehouse")
                        .WithMany()
                        .HasForeignKey("WarehouseId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Manager");

                    b.Navigation("Partner");

                    b.Navigation("Queue");

                    b.Navigation("Status");

                    b.Navigation("Warehouse");
                });

            modelBuilder.Entity("Pie.Data.Models.In.DocInBaseDoc", b =>
                {
                    b.HasOne("Pie.Data.Models.BaseDoc", "BaseDoc")
                        .WithMany()
                        .HasForeignKey("BaseDocId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Pie.Data.Models.In.DocIn", "Doc")
                        .WithMany("BaseDocs")
                        .HasForeignKey("DocId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BaseDoc");

                    b.Navigation("Doc");
                });

            modelBuilder.Entity("Pie.Data.Models.In.DocInHistory", b =>
                {
                    b.HasOne("Pie.Data.Models.In.StatusIn", "Status")
                        .WithMany()
                        .HasForeignKey("StatusKey")
                        .HasPrincipalKey("Key")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Pie.Data.Models.Identity.AppUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Status");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Pie.Data.Models.In.DocInProduct", b =>
                {
                    b.HasOne("Pie.Data.Models.In.DocIn", "Doc")
                        .WithMany("Products")
                        .HasForeignKey("DocId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Pie.Data.Models.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Doc");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Pie.Data.Models.In.DocInProductHistory", b =>
                {
                    b.HasOne("Pie.Data.Models.In.ChangeReasonIn", "ChangeReason")
                        .WithMany()
                        .HasForeignKey("ChangeReasonId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Pie.Data.Models.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Pie.Data.Models.Identity.AppUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("ChangeReason");

                    b.Navigation("Product");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Pie.Data.Models.Out.DocOut", b =>
                {
                    b.HasOne("Pie.Data.Models.DeliveryArea", "DeliveryArea")
                        .WithMany()
                        .HasForeignKey("DeliveryAreaId");

                    b.HasOne("Pie.Data.Models.Manager", "Manager")
                        .WithMany()
                        .HasForeignKey("ManagerId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Pie.Data.Models.Partner", "Partner")
                        .WithMany()
                        .HasForeignKey("PartnerId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Pie.Data.Models.Out.QueueOut", "Queue")
                        .WithMany()
                        .HasForeignKey("QueueKey")
                        .HasPrincipalKey("Key")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Pie.Data.Models.Out.StatusOut", "Status")
                        .WithMany()
                        .HasForeignKey("StatusKey")
                        .HasPrincipalKey("Key")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Pie.Data.Models.Warehouse", "Warehouse")
                        .WithMany()
                        .HasForeignKey("WarehouseId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("DeliveryArea");

                    b.Navigation("Manager");

                    b.Navigation("Partner");

                    b.Navigation("Queue");

                    b.Navigation("Status");

                    b.Navigation("Warehouse");
                });

            modelBuilder.Entity("Pie.Data.Models.Out.DocOutBaseDoc", b =>
                {
                    b.HasOne("Pie.Data.Models.BaseDoc", "BaseDoc")
                        .WithMany()
                        .HasForeignKey("BaseDocId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Pie.Data.Models.Out.DocOut", "Doc")
                        .WithMany("BaseDocs")
                        .HasForeignKey("DocId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BaseDoc");

                    b.Navigation("Doc");
                });

            modelBuilder.Entity("Pie.Data.Models.Out.DocOutHistory", b =>
                {
                    b.HasOne("Pie.Data.Models.Out.StatusOut", "Status")
                        .WithMany()
                        .HasForeignKey("StatusKey")
                        .HasPrincipalKey("Key")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Pie.Data.Models.Identity.AppUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Status");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Pie.Data.Models.Out.DocOutProduct", b =>
                {
                    b.HasOne("Pie.Data.Models.Out.DocOut", "Doc")
                        .WithMany("Products")
                        .HasForeignKey("DocId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Pie.Data.Models.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Doc");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Pie.Data.Models.Out.DocOutProductHistory", b =>
                {
                    b.HasOne("Pie.Data.Models.Out.ChangeReasonOut", "ChangeReason")
                        .WithMany()
                        .HasForeignKey("ChangeReasonId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Pie.Data.Models.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Pie.Data.Models.Identity.AppUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("ChangeReason");

                    b.Navigation("Product");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Pie.Data.Models.In.DocIn", b =>
                {
                    b.Navigation("BaseDocs");

                    b.Navigation("Products");
                });

            modelBuilder.Entity("Pie.Data.Models.Out.DocOut", b =>
                {
                    b.Navigation("BaseDocs");

                    b.Navigation("Products");
                });
#pragma warning restore 612, 618
        }
    }
}
