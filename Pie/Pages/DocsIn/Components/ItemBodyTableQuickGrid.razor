@using Pie.Data.Models.In;
<div>
    @*<QuickGrid Items="@(doc?.Products?.AsQueryable<DocInProduct>())" Class="table table-bordered table-hover">*@
    <QuickGrid Items="@FilteredProducts" Class="table table-sm table-bordered border-dark table-hover" Theme="corporate">
        <PropertyColumn Property="@(p => p.LineNumber)" Title="№" Sortable="true"></PropertyColumn>
        <PropertyColumn Property="@(p => p.Product != null ? p.Product.Code : string.Empty)" Title="Артикул" Sortable="true"></PropertyColumn>
        <PropertyColumn Property="@(p => p.Product != null ? p.Product.Name : string.Empty)" Title="Товар" Sortable="true">
            <ColumnOptions>
                <div class="search-box">
                    <input type="search" autofocus @bind="nameFilter" @bind:event="oninput" placeholder="Название..." />
                </div>
            </ColumnOptions>
        </PropertyColumn>
        <PropertyColumn Property="@(p => p.CountPlan)" Title="Кол" Sortable="true"></PropertyColumn>
        @if (DocVm?.Value?.Status?.CanChange ?? false)
        {
            @*<PropertyColumn Property="@(p => p.CountFact)" Title="Кол-во факт" Sortable="true"></PropertyColumn>*@
            <TemplateColumn Title="Кол факт" Class="p-0 m-0">
                <div class="@(context.CountPlan == context.CountFact ? string.Empty : "bg-warning bg-gradient  bg-opacity-50 text-dark") m-0 p-2">
                    <span>@context.CountFact</span>
                    <span>@(context.ChangeReasonId == null ? string.Empty : $"( {ChangeReasons?.FirstOrDefault(c => c.Id == context.ChangeReasonId)?.Name} )")</span>
                </div>
            </TemplateColumn>
        }
        <PropertyColumn Property="@(p => p.Unit)" Title="Упак" Sortable="true" />
        <PropertyColumn Property="@(p => p.Weight)" Title="Вес" Sortable="true" />
        @if (DocVm?.Value?.Status?.CanChange ?? false)
        {
            <TemplateColumn Title="Изменить" Class="d-print-none">
                <button class="btn btn-sm btn-outline-primary" @onclick="@(() => EditDoc(context))"><i class="bi bi-pencil-square"></i></button>
            </TemplateColumn>
        }
    </QuickGrid>
</div>

<EditDialog @ref="EditDialog" ChangeReasons="@ChangeReasons" OnSaveChanges="@UpdateDoc"></EditDialog>

@code {
    [Parameter] public DocInVm? DocVm { get; set; }
    [Parameter] public List<ChangeReasonIn>? ChangeReasons { get; set; }
    private EditDialog? EditDialog { get; set; }

    string? nameFilter;
    IQueryable<DocInProduct>? FilteredProducts
    {
        get
        {
            var result = DocVm?.Value?.Products?.AsQueryable();

            if (!string.IsNullOrEmpty(nameFilter))
            {
                result = result?.Where(p =>
                    p.Product != null && p.Product.Name != null && p.Product.Name.Contains(nameFilter, StringComparison.CurrentCultureIgnoreCase));
            }
            return result;
        }
    }

    private void EditDoc(DocInProduct product)
    {
        EditDialog?.Open(product);
    }

    private void UpdateDoc()
    {
        EditDialog?.Close();
    }
}
