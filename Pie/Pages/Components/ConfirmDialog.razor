@using Pie.Data.Models.In;
@using Pie.Data.Services;

<div class="modal @ModalClass" tabindex="-1" role="dialog" style="display:@ModalDisplay">
    <div class="modal-dialog" role="document">
        <div class="modal-content">

            <div class="modal-header">
                <h4 class="modal-title text-@Color">@Title</h4>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <h5>@ChildContent</h5>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-@Color" @onclick="Confirm">@Button</button>
                <button type="button" class="btn btn-secondary" @onclick="Close" data-dismiss="modal">Закрыть</button>
            </div>

        </div>
    </div>
</div>

@if (ShowBackdrop)
{
    <div class="modal-backdrop fade show"></div>
}

@code {
    [Parameter] public string? Color { get; set; }
    [Parameter] public string? Title { get; set; }
    [Parameter] public RenderFragment? ChildContent { get; set; }
    [Parameter] public string? Button { get; set; }
    [Parameter] public EventCallback OnConfirm { get; set; }

    public string ModalDisplay = "none;";
    public string ModalClass = "";
    public bool ShowBackdrop = false;

    public void Open()
    {
        ModalDisplay = "block;";
        ModalClass = "show";
        ShowBackdrop = true;
        StateHasChanged();
    }

    public void Close()
    {
        ModalDisplay = "none";
        ModalClass = "";
        ShowBackdrop = false;
        StateHasChanged();
    }

    private async Task Confirm()
    {
        await OnConfirm.InvokeAsync();
    }
}