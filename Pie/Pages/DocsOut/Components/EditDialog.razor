@using Pie.Data.Models;

<div class="modal @ModalClass" tabindex="-1" role="dialog" style="display:@ModalDisplay">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Изменить товар</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <div>@DocOutProduct?.Product?.Name</div>
                <div>@DocOutProduct?.Count</div>
                @if (DocOutProduct != null)
                {
                    <EditForm Model="@DocOutProduct">
                        <div>@DocOutProduct?.Product?.Name</div>
                        <label for="count">
                            Количество
                            <InputNumber id="count" @bind-Value="@DocOutProduct.Count" />
                        </label>
                    </EditForm>
                }
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-primary" @onclick="SaveChanges">Ok</button>
                <button type="button" class="btn btn-secondary" data-dismiss="modal" @onclick="() => Close()">Закрыть</button>
            </div>
        </div>
    </div>
</div>


@if (ShowBackdrop)
{
    <div class="modal-backdrop fade show"></div>
}


@code {
    [Parameter] public EventCallback<DocOutProduct> OnSaveChanges { get; set; }

    public Guid Guid = Guid.NewGuid();
    public string ModalDisplay = "none;";
    public string ModalClass = "";
    public bool ShowBackdrop = false;

    private DocOutProduct DocOutProduct = new();

    public void Open(DocOutProduct product)
    {
        ModalDisplay = "block;";
        ModalClass = "Show";
        ShowBackdrop = true;
        StateHasChanged();

        DocOutProduct = product;
    }

    public void Close()
    {
        ModalDisplay = "none";
        ModalClass = "";
        ShowBackdrop = false;
        StateHasChanged();
    }

    private async Task SaveChanges()
    {
        await OnSaveChanges.InvokeAsync(DocOutProduct);
    }
}